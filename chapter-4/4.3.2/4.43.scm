(add-load-path "../../lib" :relative)
(load "amb")

(for-each simple-ambeval
          '((define (distinct? items)
              (cond ((null? items) treu)
                    ((null? (cdr items)) true)
                    ((member (car items) (cdr items)) false)
                    (else (distinct? (cdr items)))))
            (define (map proc seq)
              (if (null? seq)
                '()
                (cons (proc (car seq))
                      (map proc (cdr seq)))))
            (define (yacht-puzzle)
              (define yacht car)
              (define daughter cadr)
              (define (gabrielle-father fs)
                (if (eq? (daughter (car fs)) 'gabrielle)
                  (car fs)
                  (gabrielle-father (cdr fs))))
              (let ((moore (list 'lorna (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa))))
                (require (eq? (daughter moore) 'mary))
                (let ((barnacle (list 'gabrielle (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa))))
                  (require (eq? (daughter barnacle) 'melissa))
                  (let ((hall   (list 'rosalind (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)))
                        (dowing (list 'melissa  (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)))
                        (parker (list 'mary     (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa))))
                    (let ((fathers (list moore barnacle hall dowing parker)))
                      (require (distinct? (map daughter fathers)))
                      (require (eq? (daughter parker)
                                    (yacht (gabrielle-father fathers))))
                      (list (list 'moore
                                  (list 'yacht (yacht moore))
                                  (list 'daughter (daughter moore)))
                            (list 'barnacle
                                  (list 'yacht (yacht barnacle))
                                  (list 'daughter (daughter barnacle)))
                            (list 'hall
                                  (list 'yacht (yacht hall))
                                  (list 'daughter (daughter hall)))
                            (list 'dowing
                                  (list 'yacht (yacht dowing))
                                  (list 'daughter (daughter dowing)))
                            (list 'parker
                                  (list 'yacht (yacht parker))
                                  (list 'daughter (daughter parker)))))))))
            ))

(define (main args)
  (print-ambeval '(yacht-puzzle) 100)
  ;=>
  ;((moore    (yacht lorna)     (daughter mary))
  ; (barnacle (yacht gabrielle) (daughter melissa))
  ; (hall     (yacht rosalind)  (daughter gabrielle))
  ; (dowing   (yacht melissa)   (daughter lorna))
  ; (parker   (yacht mary)      (daughter rosalind)))
  )
