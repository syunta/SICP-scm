(define (variable? e)
  (symbol? e))
(define (same-variable? x y)
  (and (variable? x) (variable? y) (eq? x y)))

(define (sum? e)
  (and (pair? e) (memq '+ e)))

(define (addend e)
  (define (iter e result)
    (cond ((and (eq? (car e) '+) (null? (cdr result)))
           (car result))
          ((eq? (car e) '+)
           (reverse result))
          (else (iter (cdr e) (cons (car e) result)))))
  (iter e '()))

(define (augend e)
  (cond ((and (eq? (car e) '+) (null? (cddr e)))
         (cadr e))
        ((eq? (car e) '+)
         (cdr e))
        (else (augend (cdr e)))))

(define (product? e)
  (and (pair? e) (memq '* e)))
(define (multiplier e)
  (car e))
(define (multiplicand e)
  (if (null? (cdddr e))
    (caddr e)
    (cddr e)))

(define (=number? ex num)
  (and (number? ex) (= ex num)))

(define (make-sum x y)
  (cond ((=number? x 0) y)
        ((=number? y 0) x)
        ((and (number? x) (number? y)) (+ x y))
        (else (list x '+ y))))

(define (make-product x y)
  (cond ((or (=number? x 0) (=number? y 0)) 0)
        ((=number? x 1) y)
        ((=number? y 1) x)
        ((and (number? x) (number? y)) (* x y))
        (else (list x '* y))))

(define (exponentiation? e)
  (and (pair? e) (eq? (cadr e) '**)))
(define (base e)
  (car e))
(define (exponent e)
  (caddr e))
(define (make-exponentiation x y)
  (cond ((=number? y 0) 1)
        ((=number? y 1) x)
        (else (list x '** y))))

(define (deriv ex var)
  (cond
    ((number? ex) 0)
    ((variable? ex)
     (if (same-variable? ex var) 1 0))
    ((sum? ex)
     (make-sum (deriv (addend ex) var)
               (deriv (augend ex) var)))
    ((product? ex)
     (make-sum
       (make-product (multiplier ex)
                     (deriv (multiplicand ex) var))
       (make-product (deriv (multiplier ex) var)
                     (multiplicand ex))))
    ((exponentiation? ex)
     (make-product
       (make-product (exponent ex)
                     (make-exponentiation (base ex)
                                          (- (exponent ex) 1)))
       (deriv (base ex) var)))
    (else (error "unknown expression type -- DERIV" ex))))

(print (deriv '(x ** 2 + x ** 3) 'x))
