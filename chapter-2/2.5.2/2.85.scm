(load "./2.84")

(define (equ? x y) (apply-generic 'equ? x y))

(define (project arg)
  (let ((t1->t2 (get 'drop (type-tag arg))))
    (if t1->t2
      (t1->t2 (contents arg))
      #f)))

(define (drop a)
  (let ((a2 (project a)))
    (if a2
      (let ((a3 (raise (type-tag a) a2)))
        (if (equ? a a3)
          (if (eq? 'scheme-number (type-tag a2))
            a2
            (drop a2))
          a))
      a)))

(define (apply-generic op . args)
  (define (iter . args)
    (let ((type-tags (map type-tag args)))
      (let ((proc (get op type-tags)))
        (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
            (let ((type1 (car type-tags))
                  (type2 (cadr type-tags))
                  (a1 (car args))
                  (a2 (cadr args)))
              (let ((new-a1 (raise type2 a1))
                    (new-a2 (raise type1 a2)))
                (cond ((eq? type1 type2) a1)
                      ((eq? (type-tag new-a1) type2)
                        (apply-generic op new-a1 a2))
                      ((eq? type1 (type-tag new-a2))
                        (apply-generic op a1 new-a2))
                      (else
                        (error "No method for these types"
                               (list op type-tags))))))
            (error "No method for these types"
                   (list op type-tags)))))))
  (let ((val (apply iter args)))
    (if (pair? val)
      (drop val)
      val)))

(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))
  (put 'equ? '(scheme-number scheme-number) =)
  (put 'make 'scheme-number
       (lambda (x) (tag x)))
  (put 'raise 'scheme-number
       (lambda (x) (make-rational x 1)))
  'done)

(define (install-rational-package)
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  (define (equ-rat? x y)
    (and (= (numer x) (numer y))
         (= (denom x) (denom y))))
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'equ? '(rational rational) equ-rat?)
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  (put 'raise 'rational
       (lambda (x) (make-real-number (inexact (/ (numer x) (denom x))))))
  (put 'drop 'rational
       (lambda (x) (make-scheme-number (quotient (numer x) (denom x)))))
  'done)

(define (install-real-number-package)
  (define (tag x)
    (attach-tag 'real-number x))
  (put 'add '(real-number real-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(real-number real-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(real-number real-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(real-number real-number)
       (lambda (x y) (tag (/ x y))))
  (put 'equ? '(real-number real-number) =)
  (put 'make 'real-number
       (lambda (x) (tag x)))
  (put 'raise 'real-number
       (lambda (x) (make-complex-from-real-imag x 0)))
  (put 'drop 'real-number
       (lambda (x)
         (let ((rat (exact x)))
           (make-rational (numerator rat) (denominator rat)))))
  'done)

(define (install-complex-package)
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
                         (+ (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
                         (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                       (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                       (- (angle z1) (angle z2))))
  (define (equ-complex? z1 z2)
    (and (= (real-part z1) (real-part z2))
         (= (imag-part z1) (imag-part z2))))
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
       (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
       (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
       (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
       (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'equ? '(complex complex) equ-complex?)
  (put 'make-from-real-imag 'complex
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex
       (lambda (r a) (tag (make-from-mag-ang r a))))
  (put 'drop 'complex
       (lambda (x) (make-real-number (real-part x))))
  'done)

(define (main args)
  (install-polar-package)
  (install-rectangular-package)
  (install-scheme-number-package)
  (install-rational-package)
  (install-real-number-package)
  (install-complex-package)

  (print (drop (make-scheme-number 10)))
  ;=> (scheme-number . 10)
  (print (drop (make-real-number 10.0)))
  ;=> (scheme-number . 10)
  (print (drop (make-real-number 1.5)))
  ;=> (rational 3 . 2)
  (print (drop (make-complex-from-real-imag 10.0 0)))
  ;=> (scheme-number . 10)

  (print (add (make-scheme-number 1)
              (make-complex-from-real-imag 1.5 0)))
  ;=> (rational 5 . 2)
  (print (add (make-rational 1 2)
              (make-complex-from-real-imag 1.5 0)))
  ;=> (scheme-number . 2)
  )
