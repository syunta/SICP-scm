(load "./2.85")

(define (cosine x) (apply-generic 'cosine x))
(define (sine x) (apply-generic 'sine x))
(define (sqr x) (apply-generic 'sqr x))
(define (sqroot x) (apply-generic 'sqroot x))
(define (atang x y) (apply-generic 'atang x y))

(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))

  ; added
  (put 'cosine '(scheme-number)
       (lambda (x) (tag (cos x))))
  (put 'sine '(scheme-number)
       (lambda (x) (tag (sin x))))
  (put 'sqr '(scheme-number)
       (lambda (x) (tag (square x))))
  (put 'sqroot '(scheme-number)
       (lambda (x) (tag (sqrt x))))
  (put 'atang '(scheme-number)
       (lambda (x y) (tag (atan x y))))

  (put 'equ? '(scheme-number scheme-number) =)
  (put 'make 'scheme-number
       (lambda (x) (tag x)))
  (put 'raise 'scheme-number
       (lambda (x) (make-rational x 1)))
  'done)

(define (install-rational-package)
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  (define (cos-rat x)
    (let ((r (exact (cos (/ (numer x) (denom x))))))
      (make-rat (numerator r) (denominator r))))
  (define (sin-rat x)
    (let ((r (exact (sin (/ (numer x) (denom x))))))
      (make-rat (numerator r) (denominator r))))
  (define (square-rat x)
    (make-rat (square (numer x))
              (square (denom x))))
  (define (sqrt-rat x)
    (let ((r (exact (sqrt (/ (numer x) (denom x))))))
      (make-rat (numerator r) (denominator r))))
  (define (atan-rat x y)
    (let ((r (exact (atan (/ (numer x) (denom x))
                          (/ (numer y) (denom y))))))
      (make-rat (numerator r) (denominator r))))
  (define (equ-rat? x y)
    (and (= (numer x) (numer y))
         (= (denom x) (denom y))))
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))

  ; added
  (put 'cosine '(rational)
       (lambda (x) (tag (cos-rat x))))
  (put 'sine '(rational)
       (lambda (x) (tag (sin-rat x))))
  (put 'sqr '(rational)
       (lambda (x) (tag (square-rat x))))
  (put 'sqroot '(rational)
       (lambda (x) (tag (sqrt-rat x))))
  (put 'atang '(rational)
       (lambda (x y) (tag (atan-rat x y))))

  (put 'equ? '(rational rational) equ-rat?)
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  (put 'raise 'rational
       (lambda (x) (make-real-number (inexact (/ (numer x) (denom x))))))
  (put 'drop 'rational
       (lambda (x) (make-scheme-number (quotient (numer x) (denom x)))))
  'done)

(define (install-real-number-package)
  (define (tag x)
    (attach-tag 'real-number x))
  (put 'add '(real-number real-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(real-number real-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(real-number real-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(real-number real-number)
       (lambda (x y) (tag (/ x y))))

  ; added
  (put 'cosine '(real-number)
       (lambda (x) (tag (cos x))))
  (put 'sine '(real-number)
       (lambda (x) (tag (sin x))))
  (put 'sqr '(real-number)
       (lambda (x) (tag (square x))))
  (put 'sqroot '(real-number)
       (lambda (x) (tag (sqrt x))))
  (put 'atang '(real-number)
       (lambda (x y) (tag (atan x y))))

  (put 'equ? '(real-number real-number) =)
  (put 'make 'real-number
       (lambda (x) (tag x)))
  (put 'raise 'real-number
       (lambda (x) (make-complex-from-real-imag x 0)))
  (put 'drop 'real-number
       (lambda (x)
         (let ((rat (exact x)))
           (make-rational (numerator rat) (denominator rat)))))
  'done)

(define (install-complex-package)
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
  (define (add-complex z1 z2)
    (make-from-real-imag (add (real-part z1) (real-part z2))
                         (add (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (sub (real-part z1) (real-part z2))
                         (sub (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (mul (magnitude z1) (magnitude z2))
                       (add (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (div (magnitude z1) (magnitude z2))
                       (sub (angle z1) (angle z2))))
  (define (equ-complex? z1 z2)
    (and (= (real-part z1) (real-part z2))
         (= (imag-part z1) (imag-part z2))))
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
       (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
       (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
       (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
       (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'equ? '(complex complex) equ-complex?)
  (put 'make-from-real-imag 'complex
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

(define (install-rectangular-package)
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude z)
    (sqroot (add (sqr (real-part z))
                 (sqr (imag-part z)))))
  (define (angle z)
    (atang (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a)
    (cons (mul r (cosine a)) (mul r (sine a))))
  (define (tag x) (attach-tag 'rectangular x))
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

(define (install-polar-package)
  (define (magnitude z) (car z))
  (define (angle z) (cdr z))
  (define (make-from-mag-ang r a) (cons r a))
  (define (real-part z)
    (mul (magnitude z) (cosine (angle z))))
  (define (imag-part z)
    (mul (magnitude z) (sine (angle z))))
  (define (make-from-real-imag x y)
    (cons (sqroot (add (sqr x) (sqr y)))
          (atang y x)))
  (define (tag x) (attach-tag 'polar x))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'angle '(polar) angle)
  (put 'make-from-real-imag 'polar
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'polar
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

(define (main args)
  (install-polar-package)
  (install-rectangular-package)
  (install-scheme-number-package)
  (install-rational-package)
  (install-real-number-package)
  (install-complex-package)



  (print (add (make-complex-from-real-imag (make-scheme-number 2)
                                           (make-scheme-number 1))
              (make-complex-from-mag-ang (make-scheme-number 10)
                                         (make-scheme-number 10))))
  (print (sub (make-complex-from-real-imag (make-scheme-number 2)
                                           (make-scheme-number 1))
              (make-complex-from-mag-ang (make-scheme-number 10)
                                         (make-scheme-number 10))))
  (print (mul (make-complex-from-real-imag (make-real-number 2.5)
                                           (make-scheme-number 1))
              (make-complex-from-mag-ang (make-scheme-number 10)
                                         (make-scheme-number 10))))
  (print (div (make-complex-from-real-imag (make-scheme-number 2)
                                           (make-scheme-number 1))
              (make-complex-from-mag-ang (make-scheme-number 10)
                                         (make-scheme-number 10))))
  (print (div (make-complex-from-real-imag (make-rational 2 9)
                                           (make-scheme-number 1))
              (make-complex-from-mag-ang (make-scheme-number 10)
                                         (make-rational 10 3))))
  )
