(add-load-path "../2.5.1" :relative)
(load "2.77")

; 実数は一旦考えずに、
; 整数のみのscheme-number -> rational -> complex の塔とする

(define (raise-1 arg)
  (let ((t1->t2 (get 'raise (type-tag arg))))
    (if t1->t2 (t1->t2 (contents arg)) arg)))

(define (raise t a)
  (let ((ta (type-tag a)))
    (if (eq? t ta)
      a
      (let ((a2 (raise-1 a)))
        (let ((t2 (type-tag a2)))
          (cond ((eq? t2 t) a2)
                ((eq? t2 ta) a2)
                (else (raise t a2))))))))

(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))
  (put 'make 'scheme-number
       (lambda (x) (tag x)))
  (put 'raise 'scheme-number
       (lambda (x) (make-rational x 1)))
  'done)

(define (install-rational-package)
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  (put 'raise 'rational
       (lambda (x) (make-complex-from-real-imag (/ (numer x) (denom x)) 0)))
  'done)

(define (main args)
  (install-polar-package)
  (install-rectangular-package)
  (install-scheme-number-package)
  (install-rational-package)
  (install-complex-package)
  (print (raise 'rational (make-scheme-number 10)))
  ;=> (rational 10 . 1)
  (print (raise 'complex (make-rational 10 2)))
  ;=> (complex rectangular 10 . 0)
  (print (raise 'complex (make-scheme-number 10)))
  ;=> (complex rectangular 10 . 0)
  (print (raise 'scheme-number (make-scheme-number 10)))
  ;=> (scheme-number . 10)
  )
