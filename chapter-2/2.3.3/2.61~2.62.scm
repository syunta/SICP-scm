(define (element-of-set? x set)
  (define (test x set n)
    (cond ((null? set) #f)
          ((= x (car set)) #t)
          ((< x (car set)) #f)
          (else (test x (cdr set) (counter)))))
  (test x set (counter)))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
    '()
    (let ((x (car set1)) (y (car set2)))
      (cond ((= x y)
             (cons x (intersection-set (cdr set1)
                                       (cdr set2))))
            ((< x y)
             (intersection-set (cdr set1) set2))
            ((> x y)
             (intersection-set set1 (cdr set2)))))))

(define (adjoin-set x set)
  (define (test x set n)
    (cond ((null? set) (list x))
          ((< x (car set)) (cons x set))
          (else (cons (car set) (test x (cdr set) (counter))))))
  (test x set (counter)))

(define (union-set set1 set2)
  (define (test set1 set2 n)
    (cond ((null? set1) set2)
          ((null? set2) set1)
          ((= (car set1) (car set2))
           (cons (car set1) (test (cdr set1) (cdr set2) (counter))))
          ((< (car set1) (car set2))
           (cons (car set1) (test (cdr set1)
                                  set2
                                  (counter))))
          ((> (car set1) (car set2))
           (cons (car set2) (test set1
                                  (cdr set2)
                                  (counter))))))
  (test set1 set2 (counter)))

(define (count-generator)
  (let ((count 0))
    (lambda () (set! count (+ count 1)))))

(define counter (count-generator))

(print (union-set '(2 4 8) '(2 3 6 7 8)))
(print (- (counter) 1))
