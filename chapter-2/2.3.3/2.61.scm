(define (element-of-set? x set)
  (define (test x set n)
    (cond ((null? set) #f)
          ((= x (car set)) #t)
          ((< x (car set)) #f)
          (else (test x (cdr set) (counter)))))
  (test x set (counter)))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
    '()
    (let ((x (car set1)) (y (car set2)))
      (cond ((= x y)
             (cons x (intersection-set (cdr set1)
                                       (cdr set2))))
            ((< x y)
             (intersection-set (cdr set1) set2))
            ((> x y)
             (intersection-set set1 (cdr set2)))))))

(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< x (car set)) (cons x set))
        (else (cons (car set)
                    (adjoin-set x (cdr set))))))

(define (main args)
  (print (adjoin-set 4 '(2 3 6 7 8)))
  ;=> (2 3 4 6 7 8)
  )
