(define (fast-expt b n)
  (fast-expt-iter b n 1))

(define (fast-expt-iter b n a)
  (cond ((= n 0) a)
        ((even? n) (fast-expt-iter (square b) (/ n 2) a))
        (else (fast-expt-iter b (- n 1) (* a b)))))

(define (main args)
  (print (fast-expt 2 1))
  (print (expt 2 1))
  (print (fast-expt 2 2))
  (print (expt 2 2))
  (print (fast-expt 2 3))
  (print (expt 2 3))
  (print (fast-expt 2 4))
  (print (expt 2 4))
  (print (fast-expt 2 5))
  (print (expt 2 5))
  (print (fast-expt 2 6))
  (print (expt 2 6))
  (print (fast-expt 2 7))
  (print (expt 2 7))
  (print (fast-expt 2 8))
  (print (expt 2 8))
  (print (fast-expt 2 9))
  (print (expt 2 9)))
