(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))

;         #---------------------------------------------------------------------#
; global->|                                                                     |
;         #---------------------------------------------------------------------#
;(factorial 6)   ^           ^           ^           ^           ^           ^
;                |           |           |           |           |           |
;             #-----#     #-----#     #-----#     #-----#     #-----#     #-----#
;         E1->| n:6 | E2->| n:5 | E3->| n:4 | E4->| n:3 | E5->| n:2 | E6->| n:1 |
;             #-----#     #-----#     #-----#     #-----#     #-----#     #-----#
;
;             (if (= n 1)
;                 1
;                 (* n (factorial (- n 1))))

(define (factorial n)
  (fact-iter 1 1 n))

(define (fact-iter product counter max-count)
  (if (> counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))

;         #-------------------------------------------------------------------------------------------#
; global->|                                                                                           |
;         #-------------------------------------------------------------------------------------------#
;(factorial 6)      ^              ^         ^         ^         ^         ^           ^           ^
;                   |              |         |         |         |         |           |           |
;                 #---#          #---#     #---#     #---#     #---#     #----#     #-----#     #-----#
;             E1->|n:1|      E2->|p:1| E3->|p:1| E4->|p:2| E5->|p:6| E6->|p:24| E7->|p:120| E8->|p:720|
;                 #---#          |c:1|     |c:2|     |c:3|     |c:4|     |c:5 |     |c:6  |     |c:7  |
;                                |m:6|     |m:6|     |m:6|     |m:6|     |m:6 |     |m:6  |     |m:6  |
;           (fact-iter 1 1 n)    #---#     #---#     #---#     #---#     #----#     #-----#     #-----#
;
;                                (if (> counter max-count)
;                                      product
;                                      (fact-iter (* counter product)
;                                                 (+ counter 1)
;                                                 max-count))
